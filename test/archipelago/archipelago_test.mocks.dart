// Mocks generated by Mockito 5.4.5 from annotations
// in archipelabutt/test/archipelago/archipelago_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:archipelabutt/archipelago/archipelago.dart' as _i6;
import 'package:archipelabutt/archipelago/client_to_server.dart' as _i8;
import 'package:archipelabutt/archipelago/server_to_client.dart' as _i7;
import 'package:async/async.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stream_channel/src/stream_channel_transformer.dart' as _i4;
import 'package:stream_channel/stream_channel.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSink_0<S> extends _i1.SmartFake implements _i2.StreamSink<S> {
  _FakeStreamSink_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamChannel_1<T1> extends _i1.SmartFake
    implements _i3.StreamChannel<T1> {
  _FakeStreamChannel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StreamChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamChannel<T> extends _i1.Mock implements _i3.StreamChannel<T> {
  @override
  _i2.Stream<T> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i2.Stream<T>.empty(),
            returnValueForMissingStub: _i2.Stream<T>.empty(),
          )
          as _i2.Stream<T>);

  @override
  _i2.StreamSink<T> get sink =>
      (super.noSuchMethod(
            Invocation.getter(#sink),
            returnValue: _FakeStreamSink_0<T>(this, Invocation.getter(#sink)),
            returnValueForMissingStub: _FakeStreamSink_0<T>(
              this,
              Invocation.getter(#sink),
            ),
          )
          as _i2.StreamSink<T>);

  @override
  void pipe(_i3.StreamChannel<T>? other) => super.noSuchMethod(
    Invocation.method(#pipe, [other]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.StreamChannel<S> transform<S>(
    _i4.StreamChannelTransformer<S, T>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transform, [transformer]),
            returnValue: _FakeStreamChannel_1<S>(
              this,
              Invocation.method(#transform, [transformer]),
            ),
            returnValueForMissingStub: _FakeStreamChannel_1<S>(
              this,
              Invocation.method(#transform, [transformer]),
            ),
          )
          as _i3.StreamChannel<S>);

  @override
  _i3.StreamChannel<T> transformStream(
    _i2.StreamTransformer<T, T>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformStream, [transformer]),
            returnValue: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#transformStream, [transformer]),
            ),
            returnValueForMissingStub: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#transformStream, [transformer]),
            ),
          )
          as _i3.StreamChannel<T>);

  @override
  _i3.StreamChannel<T> transformSink(
    _i5.StreamSinkTransformer<T, T>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformSink, [transformer]),
            returnValue: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#transformSink, [transformer]),
            ),
            returnValueForMissingStub: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#transformSink, [transformer]),
            ),
          )
          as _i3.StreamChannel<T>);

  @override
  _i3.StreamChannel<T> changeStream(
    _i2.Stream<T> Function(_i2.Stream<T>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeStream, [change]),
            returnValue: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#changeStream, [change]),
            ),
            returnValueForMissingStub: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#changeStream, [change]),
            ),
          )
          as _i3.StreamChannel<T>);

  @override
  _i3.StreamChannel<T> changeSink(
    _i2.StreamSink<T> Function(_i2.StreamSink<T>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeSink, [change]),
            returnValue: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#changeSink, [change]),
            ),
            returnValueForMissingStub: _FakeStreamChannel_1<T>(
              this,
              Invocation.method(#changeSink, [change]),
            ),
          )
          as _i3.StreamChannel<T>);

  @override
  _i3.StreamChannel<S> cast<S>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: _FakeStreamChannel_1<S>(
              this,
              Invocation.method(#cast, []),
            ),
            returnValueForMissingStub: _FakeStreamChannel_1<S>(
              this,
              Invocation.method(#cast, []),
            ),
          )
          as _i3.StreamChannel<S>);
}

/// A class which mocks [StreamSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSink<S> extends _i1.Mock implements _i2.StreamSink<S> {
  @override
  _i2.Future<dynamic> get done =>
      (super.noSuchMethod(
            Invocation.getter(#done),
            returnValue: _i2.Future<dynamic>.value(),
            returnValueForMissingStub: _i2.Future<dynamic>.value(),
          )
          as _i2.Future<dynamic>);

  @override
  _i2.Future<dynamic> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i2.Future<dynamic>.value(),
            returnValueForMissingStub: _i2.Future<dynamic>.value(),
          )
          as _i2.Future<dynamic>);

  @override
  void add(S? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Future<dynamic> addStream(_i2.Stream<S>? stream) =>
      (super.noSuchMethod(
            Invocation.method(#addStream, [stream]),
            returnValue: _i2.Future<dynamic>.value(),
            returnValueForMissingStub: _i2.Future<dynamic>.value(),
          )
          as _i2.Future<dynamic>);
}

/// A class which mocks [ArchipelagoConnector].
///
/// See the documentation for Mockito's code generation for more information.
class MockArchipelagoConnector extends _i1.Mock
    implements _i6.ArchipelagoConnector {
  @override
  _i2.Stream<_i7.ServerMessage> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i2.Stream<_i7.ServerMessage>.empty(),
            returnValueForMissingStub: _i2.Stream<_i7.ServerMessage>.empty(),
          )
          as _i2.Stream<_i7.ServerMessage>);

  @override
  void send(_i8.ClientMessage? message) => super.noSuchMethod(
    Invocation.method(#send, [message]),
    returnValueForMissingStub: null,
  );
}
